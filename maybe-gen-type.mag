load "polyhedra.mag";
load "manycubics.mag";
fields := make_data();
nfs := [x`field: x in fields];
inds := [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,167,168,169,170,171,172,173,174,176,177,178,179,182,183,184,185,187,188,190,191,192,193,195,196,197,198,199,200,202,203,204,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,227,229,230,231,232,233,234,235,236,237,238,239,240,241,243,245,246,248,250,251,252,253,254,255,256,257,258,259,260,261,262,263,266,267,269,272,275,276,279,282,283,285,288,289,292,294,295,299,300,301,303,304,307,308,309,310,311,312,313,315,316,317,319,322,323,326,327,328,329,331,336,337,338,342,344,345,347,349,350,351,352,354,355,356,361,366,367,368,371,374,376,381,382,384,386,387,388,389,392,396,398,403,409,410,411,412,415,416,417,421,423,425,426,428,429,430,433,436,438,444,445,451,455,460,461,462,465,466,470,473,474,475,476,477,482,483,485,487,488,490,491,494,499,501,504,509,510,519,522,523,524,535,540,544,545,555,557,559,566,567,570,573,574,575,580,582,586,588,589,593,597,599,611,620,621,632,634,635,636,644,651,656,657,671,673,685,690,696,698,717,719,725,731,738,741,752,755,762,766,783,822,836,861,899,921,994,1008,1053,1063,1099,1133];
g0 := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 33, 34, 36, 40, 43, 49];
g1 := [28, 30, 31, 32, 37, 38, 41, 44, 48, 50, 52, 54, 57, 58];
needed := [nfs[i]: i in inds|i notin s] where s is Set(g0 cat g1);
// of these, 349, 7, 17, 1 have class number 1, 2, 3, 4 respectively.

function genus_cl_reps(nf)
  ncg,ncgto := NarrowClassGroup(nf);
  ncg2 := sub<ncg|[2*i: i in Generators(ncg)]>;
  genus_reps := [];
  cl_reps := [];
  bd := 10;
  repeat
    ids := [x: x in IdealsUpTo(bd,nf)|Norm(x) gt (bd eq 10 select 0 else bd/2)]; 
    bd *:= 2;
    for i in ids do
      if forall{x: x in cl_reps|not IsPrincipal(i^-1*x)} then
        Append(~cl_reps,i);
      end if;
      if forall{x: x in genus_reps|(i^-1*x)@@ncgto notin ncg2} then
        Append(~genus_reps,i);
      end if;
    end for;
  until #cl_reps eq ClassNumber(nf) and #genus_reps eq #ncg/#ncg2;
  return genus_reps, cl_reps;
end function;
  
fail := false;
for nf in needed do
  "starting field defined by", DefiningPolynomial(nf);
  genus_reps, cl_reps := genus_cl_reps(nf);
  tpu,unit_list,bk,units_bk := unit_data(nf);
  zeta := AbsoluteValue(2*Roots(MinimalPolynomial(Evaluate(LSeries(nf),-1),1),Q)[1,1]);
  for g in genus_reps do
    ps := [g*i^2: i in cl_reps];
    vols := [];
    for p in ps do
      reds_strict := list_reducers(nf,units_bk,bk:id := p);
      "found", #reds_strict, "reducers";
      polys := make_polyhedra(units_bk cat unit_list,Include(reds_strict,Minimum(p)));
      "made polyhedra";
      // The discriminant times the norm comes from the covolume of the
      // dual of the ideal.  The ratio h^+/h is [O^*_{K,+}:{O^*_K}^2].
      // In other files we leave out h because it is always 1.
      vol := union_decompose(polys)*Discriminant(MaximalOrder(nf))*NarrowClassNumber(nf)/ClassNumber(nf)*Norm(p);
      "found volume of union";
      Append(~vols,vol);
    end for;
    growth := zeta - &+vols;
    "growth rate is at least", growth, "for genus", Index(genus_reps,g), "for field", Index(needed,nf);
    if growth le 0 then
      "!!! failed to prove general type";
      fail := true;
    end if;
  end for;
  "done field", Index(needed,nf);
end for;

assert not fail;

