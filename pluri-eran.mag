load "fields.mag";
load "defect-new.mag";
// function to try to find sections of the pluricanonical
load "dimension.mag";

function sections_nk(nf,n: prec := 0);
  mo := MaximalOrder(nf);
  ndct,nd := new_defects(nf,n-1);
  vprint ModFrmHil, 2: "finished calculating the elements whose coefficients have to be 0";
  max_norm := Max([Norm(i): i in nd[n]]);
  vt := vt_series(nf);
  if prec eq 0 then
    prec := 1;
    repeat
      prec *:= 2;
      ids := IdealsUpTo(prec,nf);
    until #ids gt 5/4*Coefficient(vt,n) and max_norm*Discriminant(mo) lt prec;
  end if;
  vprint ModFrmHil, 2: "chose precision", prec;
  M := GradedRingOfHMFs(nf,prec);
  N := 1*mo; // fix later
  Mk := HMFSpace(M,N,[2*n^^Degree(nf)]);
  vprint ModFrmHil, 1: "calculating cusp form basis";
  vtime ModFrmHil, 1: Sk := CuspFormBasisViaTrace(Mk);
  Ek := EisensteinBasis(Mk);
  Bk := Sk cat Ek;
  
  ks := Sort(Setseq(Keys(Coefficients(Bk[1])[1*mo])),func<x,y|Norm(x)-Norm(y)>);
  inds := [Index(ks,x): x in ks|x eq 0 or x*mo in nd[n]];
  assert 0 notin inds;
  coeff_mat := Matrix([[Coefficients(mf)[1*mo,i]: i in ks]: mf in Bk]);
  assert Rank(coeff_mat) eq Coefficient(vt,n);

  vprint ModFrmHil,2: "doing basic linear algebra";
  Qn := VectorSpace(Q,#inds);
  Qd := VectorSpace(Q,#Bk);
  ton := hom<Qd->Qn|[Qn|[r[i]: i in inds]: r in Rows(coeff_mat)]>;
  ker := Kernel(ton);
  vs := [&+[k[i]*Bk[i]: i in [1..#Bk]]: k in Basis(ker)];
  assert forall{v: v in vs, i in inds|Coefficients(v)[1*mo,ks[i]] eq 0};
  return vs, M;
end function;

  
  
